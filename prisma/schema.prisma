generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Request {
  id                  Int                  @id @default(autoincrement())
  userId              Int?                 @map("user_id")
  userName            String               @map("user_name") @db.VarChar(255)
  serviceTypeId       Int                  @map("service_type_id")
  price               Decimal              @db.Decimal(11, 2)
  pickupLocation      String               @map("pickup_location") @db.VarChar(255)
  deliveryLocation    String               @map("delivery_location") @db.VarChar(255)
  pickupDate          DateTime             @map("pickup_date") @db.DateTime(0)
  description         String?              @db.Text
  priority            Priority?            @default(medium)
  myStatus            Int?                 @default(0) @map("my_status") @db.TinyInt
  status              String?              @db.VarChar(20)
  createdAt           DateTime             @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt           DateTime             @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  staff_id            Int?
  atm_id              Int?
  staff_name          String?
  team_id             Int?
  latitude            Float?
  longitude           Float?
  branch_id           Int?
  sealNumberId        Int?
  atm_cash_counts     atm_cash_counts[]
  atm_counters        atm_counters[]
  cash_counts         cash_counts[]
  cash_processing     cash_processing[]
  CrewLocation        CrewLocation[]
  delivery_completion delivery_completion?
  atms                atms?                @relation(fields: [atm_id], references: [id], onUpdate: Restrict, map: "fk_requests_atm_id")
  branches            branches?            @relation(fields: [branch_id], references: [id])
  user                Staff?               @relation("UserRequests", fields: [userId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "requests_ibfk_1")
  ServiceType         ServiceType          @relation(fields: [serviceTypeId], references: [id], onUpdate: Restrict, map: "requests_ibfk_2")
  seals               seals?               @relation(fields: [sealNumberId], references: [id])
  staff               Staff[]              @relation("RequestToStaff")

  @@index([branch_id], map: "requests_branch_id_fkey")
  @@index([sealNumberId], map: "requests_sealNumberId_fkey")
  @@index([serviceTypeId], map: "service_type_id")
  @@index([staff_id], map: "staff_id")
  @@index([userId], map: "user_id")
  @@index([atm_id], map: "fk_requests_atm_id")
  @@index([myStatus, staff_id], map: "requests_myStatus_staff_id_fkey")
  @@index([myStatus, createdAt], map: "requests_myStatus_createdAt_fkey")
  @@map("requests")
}

model ServiceType {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(100)
  description      String?            @db.Text
  created_at       DateTime           @default(now()) @db.Timestamp(0)
  updated_at       DateTime           @default(now()) @db.Timestamp(0)
  requests         Request[]
  service_charges  service_charges[]
  service_requests service_requests[]

  @@map("service_types")
}

model Staff {
  id                  Int               @id @default(autoincrement())
  name                String            @db.VarChar(200)
  phone               String?           @db.VarChar(20)
  password            String?           @db.VarChar(255)
  roleId              Int               @default(0) @map("role_id")
  role                String            @db.VarChar(200)
  emplNo              String            @unique @map("empl_no") @db.VarChar(100)
  idNo                Int?              @map("id_no")
  photoUrl            String?           @map("photo_url") @db.VarChar(200)
  status              Int               @default(0)
  created_at          DateTime?
  assignedTeamMembers Team_assignment[] @relation("StaffToTeamMembers")
  assignedTo          Team_assignment[] @relation("TeamMemberToStaff")
  atm_cash_counts     atm_cash_counts[]
  atm_counters        atm_counters[]
  cash_counts         cash_counts[]
  CrewLocation        CrewLocation[]
  createdRequests     Request[]         @relation("UserRequests")
  sos                 sos[]             @relation("GuardSOS")
  team_members        team_members[]
  teams               teams[]
  tokens              tokens[]
  requests            Request[]         @relation("RequestToStaff")

  @@map("staff")
}

model Team_assignment {
  id           Int      @id @default(autoincrement())
  staffId      Int
  teamMemberId Int
  assignedAt   DateTime @default(now())
  staff        Staff    @relation("StaffToTeamMembers", fields: [staffId], references: [id])
  teamMember   Staff    @relation("TeamMemberToStaff", fields: [teamMemberId], references: [id])

  @@index([staffId], map: "TeamAssignment_staffId_fkey")
  @@index([teamMemberId], map: "TeamAssignment_teamMemberId_fkey")
}

model CrewLocation {
  id         Int      @id @default(autoincrement())
  requestId  Int      @map("request_id")
  staffId    Int      @map("staff_id")
  latitude   Float
  longitude  Float
  capturedAt DateTime @default(now()) @map("captured_at")
  request    Request  @relation(fields: [requestId], references: [id])
  staff      Staff    @relation(fields: [staffId], references: [id])

  @@index([requestId], map: "crew_location_request_id_idx")
  @@index([staffId], map: "crew_location_staff_id_idx")
  @@map("crew_locations")
}

model users {
  id         Int        @id @default(autoincrement())
  username   String     @unique(map: "username") @db.VarChar(50)
  password   String     @db.VarChar(255)
  email      String     @unique(map: "email") @db.VarChar(100)
  role       users_role @default(user)
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
}

model branches {
  id               Int                @id @default(autoincrement())
  client_id        Int
  role_id          Int
  name             String             @db.VarChar(255)
  address          String?            @db.Text
  phone            String?            @db.VarChar(20)
  email            String?            @db.VarChar(255)
  password         String             @db.VarChar(200)
  contact_person   String?            @db.VarChar(100)
  created_at       DateTime           @default(now()) @db.Timestamp(0)
  updated_at       DateTime           @default(now()) @db.Timestamp(0)
  clients          clients            @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "branches_ibfk_1")
  client_update    client_update[]
  requests         Request[]
  service_requests service_requests[]
  vault_update     vault_update[]

  @@index([client_id], map: "client_id")
}

model cash_counts {
  id              Int                 @id @default(autoincrement())
  fifties         Int
  hundreds        Int
  twoHundreds     Int
  fiveHundreds    Int
  thousands       Int
  totalAmount     Int                 @default(0)
  sealNumber      String?
  imagePath       String?
  image_url       String?             @db.VarChar(255)
  staff_id        Int?
  created_at      DateTime            @default(now())
  request_id      Int?
  fives           Int
  ones            Int
  tens            Int
  twenties        Int
  forties         Int
  status          cash_counts_status? @default(pending)
  requests        Request?            @relation(fields: [request_id], references: [id])
  staff           Staff?              @relation(fields: [staff_id], references: [id])
  cash_processing cash_processing[]

  @@index([request_id], map: "cash_counts_request_id_fkey")
  @@index([staff_id], map: "cash_counts_staff_id_fkey")
  @@index([created_at, status], map: "cash_counts_created_at_status_fkey")
}

model atm_cash_counts {
  id           Int      @id @default(autoincrement())
  fifties      Int
  hundreds     Int
  twoHundreds  Int
  fiveHundreds Int
  thousands    Int
  totalAmount  Int      @default(0)
  sealNumber   String?
  imagePath    String?
  image_url    String?  @db.VarChar(255)
  staff_id     Int?
  created_at   DateTime @default(now())
  request_id   Int?
  fives        Int
  ones         Int
  tens         Int
  twenties     Int
  forties      Int
  requests     Request? @relation(fields: [request_id], references: [id])
  staff        Staff?   @relation(fields: [staff_id], references: [id])

  @@index([request_id], map: "cash_counts_request_id_fkey")
  @@index([staff_id], map: "cash_counts_staff_id_fkey")
}

model clients {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  account_number   String             @unique(map: "account_number") @db.VarChar(50)
  email            String             @db.VarChar(255)
  phone            String?            @db.VarChar(20)
  address          String?            @db.Text
  created_at       DateTime           @default(now()) @db.Timestamp(0)
  updated_at       DateTime           @default(now()) @db.Timestamp(0)
  atm_counters     atm_counters[]
  atm_loading      atm_loading[]
  atms             atms[]
  branches         branches[]
  client_update    client_update[]
  service_charges  service_charges[]
  service_requests service_requests[]
  vault_update     vault_update[]
}

model delivery_completion {
  id                   Int                        @id @default(autoincrement())
  requestId            Int                        @unique
  completedById        Int
  completedByName      String
  completedAt          DateTime                   @default(now())
  photoUrl             String?
  bankDetails          String?                    @db.LongText
  latitude             Float?
  longitude            Float?
  status               delivery_completion_status @default(pending)
  isVaultOfficer       Boolean                    @default(false)
  receivingOfficerId   Int?
  receivingOfficerName String?
  notes                String?                    @db.Text
  sealNumberId         Int?
  requests             Request                    @relation(fields: [requestId], references: [id])
  seals                seals?                     @relation(fields: [sealNumberId], references: [id])

  @@index([sealNumberId], map: "delivery_completion_sealNumberId_fkey")
}

model notices {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(255)
  content    String   @db.Text
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)
  created_by Int?
  status     Int
}

model roles {
  id          Int      @id @default(autoincrement())
  name        String   @unique(map: "name") @db.VarChar(255)
  description String?  @db.Text
  created_at  DateTime @default(now()) @db.Timestamp(0)
  updated_at  DateTime @default(now()) @db.Timestamp(0)
}

model seals {
  id                  Int                   @id @default(autoincrement())
  seal_number         String                @unique @db.VarChar(255)
  created_at          DateTime              @default(now()) @db.Timestamp(0)
  updated_at          DateTime              @default(now()) @db.Timestamp(0)
  confirmed           Boolean               @default(false)
  confirmed_at        DateTime              @default(dbgenerated("('0000-00-00 00:00:00')")) @db.Timestamp(0)
  confirmed_by_id     Int
  status              seals_status          @default(assigned)
  delivery_completion delivery_completion[]
  requests            Request[]
}

model service_charges {
  id              Int         @id @default(autoincrement())
  client_id       Int
  service_type_id Int
  price           Decimal     @db.Decimal(10, 2)
  created_at      DateTime    @default(now()) @db.Timestamp(0)
  updated_at      DateTime    @default(now()) @db.Timestamp(0)
  clients         clients     @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "service_charges_ibfk_1")
  service_types   ServiceType @relation(fields: [service_type_id], references: [id], onUpdate: Restrict, map: "service_charges_ibfk_2")

  @@index([client_id], map: "client_id")
  @@index([service_type_id], map: "service_type_id")
}

model service_requests {
  id               Int                     @id @default(autoincrement())
  client_id        Int
  branch_id        Int
  service_type_id  Int
  pickup_location  String                  @db.Text
  dropoff_location String                  @db.Text
  pickup_date      DateTime                @db.Date
  pickup_time      DateTime                @db.Time(0)
  status           service_requests_status @default(pending)
  created_at       DateTime                @default(now()) @db.Timestamp(0)
  updated_at       DateTime                @default(now()) @db.Timestamp(0)
  clients          clients                 @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "service_requests_ibfk_1")
  branches         branches                @relation(fields: [branch_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "service_requests_ibfk_2")
  service_types    ServiceType             @relation(fields: [service_type_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "service_requests_ibfk_3")

  @@index([branch_id], map: "branch_id")
  @@index([client_id], map: "client_id")
  @@index([service_type_id], map: "service_type_id")
}

model sos {
  id         Int      @id @default(autoincrement())
  sos_type   String   @default("sos")
  latitude   Float
  longitude  Float
  status     String   @default("active")
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)
  guard_name String   @db.VarChar(255)
  comment    String?  @db.Text
  guard_id   Int
  guard      Staff    @relation("GuardSOS", fields: [guard_id], references: [id])

  @@index([guard_id], map: "sos_guard_id_fkey")
}

model team_members {
  team_id    Int
  staff_id   Int
  created_at DateTime @default(now()) @db.Timestamp(0)
  teams      teams    @relation(fields: [team_id], references: [id], onUpdate: Restrict, map: "team_members_ibfk_1")
  staff      Staff    @relation(fields: [staff_id], references: [id], onUpdate: Restrict, map: "team_members_ibfk_2")

  @@id([team_id, staff_id])
  @@index([staff_id], map: "staff_id")
}

model teams {
  id                Int             @id @default(autoincrement())
  name              String          @db.VarChar(255)
  crew_commander_id Int?
  created_at        DateTime        @default(now()) @db.Timestamp(0)
  client_update     client_update[]
  team_members      team_members[]
  staff             Staff?          @relation(fields: [crew_commander_id], references: [id], onUpdate: Restrict, map: "fk_teams_crew_commander")
  vault_update      vault_update[]

  @@index([crew_commander_id], map: "fk_teams_crew_commander")
}

model tokens {
  id            Int      @id @default(autoincrement())
  staff_id      Int
  access_token  String   @db.Text
  refresh_token String   @db.VarChar(255)
  expires_at    DateTime
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
  is_valid      Boolean  @default(true)
  last_used_at  DateTime @default(now())
  device_info   String?  @db.Text
  ip_address    String?  @db.VarChar(45)
  staff         Staff    @relation(fields: [staff_id], references: [id], onDelete: Cascade)

  @@index([refresh_token], map: "token_refresh_token_idx")
  @@index([staff_id], map: "token_staff_id_fkey")
}

model atms {
  id            Int             @id @default(autoincrement())
  client_id     Int
  atm_code      String          @db.VarChar(255)
  location      String          @db.VarChar(255)
  comment       String?         @db.Text
  created_at    DateTime        @default(now()) @db.Timestamp(0)
  updated_at    DateTime        @default(now()) @db.Timestamp(0)
  atm_counters  atm_counters?
  atm_loading   atm_loading[]
  clients       clients         @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "atms_ibfk_1")
  client_update client_update[]
  requests      Request[]

  @@unique([client_id, atm_code], map: "unique_atm_code_per_client")
}

model atm_counters {
  id                Int      @id @default(autoincrement())
  atm_id            Int      @unique
  client_id         Int      @map("client_id")
  counter_number    String   @map("counter_number") @db.VarChar(50)
  date              DateTime @default(now()) @db.DateTime(0)
  team_id           Int      @map("team_id")
  crew_commander_id Int?     @map("crew_commander_id")
  request_id        Int?
  atms              atms     @relation(fields: [atm_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
  staff             Staff?   @relation(fields: [crew_commander_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
  clients           clients  @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "atm_counters_ibfk_1")
  requests          Request? @relation(fields: [request_id], references: [id])

  @@index([crew_commander_id], map: "atm_counters_crew_commander_id_fkey")
  @@index([client_id], map: "atm_counters_ibfk_1")
  @@index([request_id], map: "atm_counters_request_id_fkey")
  @@index([date, client_id], map: "atm_counters_date_client_id_fkey")
}

model atm_loading {
  id           Int      @id @default(autoincrement())
  client_id    Int
  atm_id       Int
  ones         Int?     @default(0)
  fives        Int?     @default(0)
  tens         Int?     @default(0)
  twenties     Int?     @default(0)
  forties      Int?     @default(0)
  fifties      Int?     @default(0)
  hundreds     Int?     @default(0)
  twoHundreds  Int?     @default(0)
  fiveHundreds Int?     @default(0)
  thousands    Int?     @default(0)
  total_amount Decimal  @db.Decimal(15, 2)
  loading_date DateTime @db.Date
  comment      String?  @db.Text
  created_at   DateTime @default(now()) @db.Timestamp(0)
  updated_at   DateTime @default(now()) @db.Timestamp(0)
  clients      clients  @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "atm_loading_ibfk_1")
  atms         atms     @relation(fields: [atm_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "atm_loading_ibfk_2")

  @@index([atm_id], map: "idx_atm_id")
  @@index([client_id], map: "idx_client_id")
  @@index([loading_date], map: "idx_loading_date")
}

model cash_processing {
  id                     Int         @id @default(autoincrement())
  cash_count_id          Int
  request_id             Int
  expected_total         Decimal     @db.Decimal(15, 2)
  processed_total        Decimal     @db.Decimal(15, 2)
  difference             Decimal     @db.Decimal(15, 2)
  matched                Boolean?    @default(false)
  expected_ones          Int?        @default(0)
  expected_fives         Int?        @default(0)
  expected_tens          Int?        @default(0)
  expected_twenties      Int?        @default(0)
  expected_forties       Int?        @default(0)
  expected_fifties       Int?        @default(0)
  expected_hundreds      Int?        @default(0)
  expected_twoHundreds   Int?        @default(0)
  expected_fiveHundreds  Int?        @default(0)
  expected_thousands     Int?        @default(0)
  processed_ones         Int?        @default(0)
  processed_fives        Int?        @default(0)
  processed_tens         Int?        @default(0)
  processed_twenties     Int?        @default(0)
  processed_forties      Int?        @default(0)
  processed_fifties      Int?        @default(0)
  processed_hundreds     Int?        @default(0)
  processed_twoHundreds  Int?        @default(0)
  processed_fiveHundreds Int?        @default(0)
  processed_thousands    Int?        @default(0)
  comment                String?     @db.Text
  created_at             DateTime    @default(now()) @db.Timestamp(0)
  cash_counts            cash_counts @relation(fields: [cash_count_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cash_processing_ibfk_1")
  requests               Request     @relation(fields: [request_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cash_processing_ibfk_2")

  @@index([cash_count_id], map: "cash_count_id")
  @@index([request_id], map: "request_id")
}

model client_update {
  id               Int                @id @default(autoincrement())
  client_id        Int
  branch_id        Int?
  team_id          Int?
  type             client_update_type
  amount           Decimal            @db.Decimal(15, 2)
  new_balance      Decimal            @db.Decimal(15, 2)
  comment          String?            @db.Text
  ones             Int?               @default(0)
  fives            Int?               @default(0)
  tens             Int?               @default(0)
  twenties         Int?               @default(0)
  forties          Int?               @default(0)
  fifties          Int?               @default(0)
  hundreds         Int?               @default(0)
  twoHundreds      Int?               @default(0)
  fiveHundreds     Int?               @default(0)
  thousands        Int?               @default(0)
  created_at       DateTime           @default(now()) @db.Timestamp(0)
  transaction_date DateTime?          @db.Date
  atm_id           Int?
  clients          clients            @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "client_update_ibfk_1")
  branches         branches?          @relation(fields: [branch_id], references: [id], onUpdate: Restrict, map: "client_update_ibfk_2")
  teams            teams?             @relation(fields: [team_id], references: [id], onUpdate: Restrict, map: "client_update_ibfk_3")
  atms             atms?              @relation(fields: [atm_id], references: [id], onUpdate: Restrict, map: "client_update_ibfk_4")

  @@index([atm_id], map: "atm_id")
  @@index([branch_id], map: "branch_id")
  @@index([client_id], map: "client_id")
  @@index([team_id], map: "team_id")
}

model vault {
  id              Int            @id @default(autoincrement())
  name            String         @db.VarChar(255)
  current_balance Decimal?       @default(0.00) @db.Decimal(15, 2)
  thousands       Int?           @default(0)
  fiveHundreds    Int?           @default(0)
  twoHundreds     Int?           @default(0)
  hundreds        Int?           @default(0)
  fifties         Int?           @default(0)
  forties         Int?           @default(0)
  twenties        Int?           @default(0)
  tens            Int?           @default(0)
  fives           Int?           @default(0)
  ones            Int?           @default(0)
  created_at      DateTime       @default(now()) @db.Timestamp(0)
  updated_at      DateTime       @default(now()) @db.Timestamp(0)
  vault_update    vault_update[]
}

model vault_update {
  id               Int       @id @default(autoincrement())
  vault_id         Int
  client_id        Int?
  branch_id        Int?
  team_id          Int?
  amount_in        Decimal?  @default(0.00) @db.Decimal(15, 2)
  amount_out       Decimal?  @default(0.00) @db.Decimal(15, 2)
  new_balance      Decimal   @db.Decimal(15, 2)
  comment          String?   @db.Text
  created_at       DateTime  @default(now()) @db.Timestamp(0)
  transaction_date DateTime? @db.Date
  ones             Int?      @default(0)
  fives            Int?      @default(0)
  tens             Int?      @default(0)
  twenties         Int?      @default(0)
  forties          Int?      @default(0)
  fifties          Int?      @default(0)
  hundreds         Int?      @default(0)
  twoHundreds      Int?      @default(0)
  fiveHundreds     Int?      @default(0)
  thousands        Int?      @default(0)
  vault            vault     @relation(fields: [vault_id], references: [id], onUpdate: Restrict, map: "vault_update_ibfk_1")
  clients          clients?  @relation(fields: [client_id], references: [id], onUpdate: Restrict, map: "vault_update_ibfk_2")
  branches         branches? @relation(fields: [branch_id], references: [id], onUpdate: Restrict, map: "vault_update_ibfk_3")
  teams            teams?    @relation(fields: [team_id], references: [id], onUpdate: Restrict, map: "vault_update_ibfk_4")

  @@index([branch_id], map: "branch_id")
  @@index([client_id], map: "client_id")
  @@index([team_id], map: "team_id")
  @@index([vault_id], map: "vault_id")
}

model vault_users {
  id         Int              @id @default(autoincrement())
  username   String           @unique(map: "username") @db.VarChar(50)
  password   String           @db.VarChar(255)
  email      String           @unique(map: "email") @db.VarChar(100)
  role       vault_users_role @default(user)
  created_at DateTime         @default(now())
  updated_at DateTime         @default(now())
}

enum Priority {
  low
  medium
  high
}

enum users_role {
  admin
  user
}

enum seals_status {
  broken
  assigned
  re_assigned
}

enum service_requests_status {
  unassigned
  pending
  in_progress
  completed
  cancelled
}

enum delivery_completion_status {
  pending
  in_progress
  completed
  cancelled
}

enum client_update_type {
  credit
  debit
}

enum vault_users_role {
  admin
  user
}

enum cash_counts_status {
  pending
  received
}
